{
    "swagger": "2.0",
    "info": {
        "title": "RotaTour API",
        "description": "Documentation created using Swagger.",
        "contact": {
            "name": "Saulo Gomes",
            "url": "https://github.com/saulobr88"
        },
        "version": "1.0"
    },
    "host": "rotatourapi.herokuapp.com",
    "basePath": "",
    "schemes": [
        "https"
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "get a JWT token for a user.",
                "description": "get a JWT token for a user.",
                "operationId": "api.auth",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "body",
                        "description": "Email used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "body",
                        "description": "Password used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - respond with a JWT Token"
                    },
                    "401": {
                        "description": "Invalid Credentials."
                    },
                    "500": {
                        "description": "Could not create token"
                    }
                }
            }
        },
        "/api/getuser": {
            "get": {
                "tags": [
                    "login"
                ],
                "summary": "Get the user by token - For Tests only.",
                "description": "get a user by JWT Token - for tests only.",
                "operationId": "api.getuser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - respond with a JWT Token"
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "Handle a registration request for the application.",
                "description": "Handle a registration request for the application",
                "operationId": "api.register",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "body",
                        "description": "Fullname used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "body",
                        "description": "Email used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "body",
                        "description": "Password used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - respond with a JWT Token"
                    },
                    "409": {
                        "description": "User already exists."
                    }
                }
            }
        },
        "/api/social/register": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "Register the user information from Social Provider and return a JWT Token.",
                "description": "Register the user information from Social Provider and return a JWT Token.",
                "operationId": "api.social.register",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "body",
                        "description": "Fullname used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "body",
                        "description": "Email used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "avatar",
                        "in": "body",
                        "description": "Avatar image Url",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "provider",
                        "in": "body",
                        "description": "Provider Name Social Provider, all lowercase",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    },
                    {
                        "name": "provider_id",
                        "in": "body",
                        "description": "Provider Id From Social Provider",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - respond with a JWT Token"
                    },
                    "400": {
                        "description": "Email not provided"
                    }
                }
            }
        },
        "/api/friends": {
            "get": {
                "tags": [
                    "friends"
                ],
                "summary": "Display a listing of friends.",
                "description": "Returns friends.",
                "operationId": "api.friends.index",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Friends overview."
                    },
                    "401": {
                        "description": "Unauthorized action."
                    }
                }
            }
        },
        "/api/friends/add/{email}": {
            "get": {
                "tags": [
                    "friends"
                ],
                "summary": "Send a friendship request.",
                "description": "Send a friendship request.",
                "operationId": "api.friends.add",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Friend request sent"
                    },
                    "401": {
                        "description": "Unauthorized action."
                    },
                    "400": {
                        "description": "That user could not be found."
                    },
                    "403": {
                        "description": "You are already friends."
                    },
                    "406": {
                        "description": "Friend request already pending."
                    },
                    "409": {
                        "description": "Yourself can't be in your friends list."
                    }
                }
            }
        },
        "/api/friends/accept/{email}": {
            "get": {
                "tags": [
                    "friends"
                ],
                "summary": "Accept a friendship request.",
                "description": "Accept a friendship request.",
                "operationId": "api.friends.accept",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Friend request accepted"
                    },
                    "401": {
                        "description": "Unauthorized action."
                    },
                    "400": {
                        "description": "That user could not be found."
                    },
                    "406": {
                        "description": "There is no Request Received."
                    }
                }
            }
        },
        "/api/friends/leavefriendship/{email}": {
            "post": {
                "tags": [
                    "friends"
                ],
                "summary": "Leave a Friendship.",
                "description": "Leave a friendship.",
                "operationId": "api.friends.leave",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Leave a Friendship"
                    },
                    "400": {
                        "description": "That user could not be found."
                    },
                    "406": {
                        "description": "You aren't friend of ..."
                    }
                }
            }
        },
        "/api/itens/delete/{id}": {
            "delete": {
                "tags": [
                    "itens"
                ],
                "summary": "Remove the specified Item from storage.",
                "description": "Delete the specified item.",
                "operationId": "api.item.delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Item id in database",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Item deleted."
                    },
                    "404": {
                        "description": "Item not found."
                    },
                    "403": {
                        "description": "Item can't be deleted."
                    }
                }
            }
        },
        "/api/places/show": {
            "get": {
                "tags": [
                    "places"
                ],
                "summary": "Display the specified place.",
                "description": "Returns place details.",
                "operationId": "api.places.show",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "google_place_id",
                        "in": "body",
                        "description": "UUID From Google Places API",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewPlace"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place detail based on Google-place-id."
                    },
                    "401": {
                        "description": "Unauthorized action."
                    }
                }
            }
        },
        "/api/routes": {
            "get": {
                "tags": [
                    "routes"
                ],
                "summary": "Display a listing of the routes.",
                "description": "Returns the user's routes.",
                "operationId": "api.routes.index",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found and return Routes."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "routes"
                ],
                "summary": "Store a newly created route in storage.",
                "description": "Store a user's new route.",
                "operationId": "api.routes.store",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "body",
                        "description": "Name of the new Route",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The route description",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "body",
                        "description": "A tag list for the route",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found and will save the Route."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "500": {
                        "description": "Route could not be saved."
                    }
                }
            }
        },
        "/api/routes/show/{id}": {
            "get": {
                "tags": [
                    "routes"
                ],
                "summary": "Display the specified route.",
                "description": "Returns the route details.",
                "operationId": "api.routes.show",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Route id in database",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Route found."
                    },
                    "404": {
                        "description": "Route not found."
                    }
                }
            }
        },
        "/api/routes/update/{id}": {
            "put": {
                "tags": [
                    "routes"
                ],
                "summary": "Update the specified route in storage.",
                "description": "Update a user's route.",
                "operationId": "api.routes.update",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "body",
                        "description": "Name of the new Route",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The route description",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "body",
                        "description": "A tag list for the route",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "array"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found and will update the Route."
                    },
                    "404": {
                        "description": "User not found Or Route not found."
                    },
                    "403": {
                        "description": "Forbbiden - You could not update the Route."
                    },
                    "500": {
                        "description": "Route could not be updated."
                    }
                }
            }
        },
        "/api/routes/delete/{id}": {
            "delete": {
                "tags": [
                    "routes"
                ],
                "summary": "Remove the specified route from storage.",
                "description": "Delete the specified route.",
                "operationId": "api.routes.delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Route id in database",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Route found."
                    },
                    "404": {
                        "description": "Route not found."
                    }
                }
            }
        },
        "/api/routes/addToRoute": {
            "post": {
                "tags": [
                    "routes"
                ],
                "summary": "Add a item into a route.",
                "description": "Adds an Item to specified route.",
                "operationId": "api.routes.addToRoute",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "routeId",
                        "in": "body",
                        "description": "Route id in database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewRoute"
                        },
                        "type": "string"
                    },
                    {
                        "name": "google_place_id",
                        "in": "body",
                        "description": "Google place - id",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewPlace"
                        },
                        "type": "string"
                    },
                    {
                        "name": "google_places",
                        "in": "body",
                        "description": "List (Array) of Google Places Ids to include in the Especified Route",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewPlace"
                        },
                        "type": "array"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success - Add to Route."
                    },
                    "401": {
                        "description": "Param google_place_id OR google_places not provided"
                    },
                    "403": {
                        "description": "Forbbiden - You are not the owner"
                    },
                    "404": {
                        "description": "Route not found."
                    }
                }
            }
        },
        "/api/search": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Display results of a search query",
                "description": "Returns results of a search query.",
                "operationId": "api.search.results",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "query",
                        "in": "body",
                        "description": "Name (or partial name) used by user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewUser"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result overview."
                    },
                    "400": {
                        "description": "no input query."
                    }
                }
            }
        },
        "/api/tags": {
            "get": {
                "tags": [
                    "tags"
                ],
                "summary": "Display a listing of the tags.",
                "description": "Returns all tags",
                "operationId": "api.tags.index",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success - return all tags."
                    }
                }
            },
            "post": {
                "tags": [
                    "tags"
                ],
                "summary": "Store a newly created route in storage.",
                "description": "Store a new tag.",
                "operationId": "api.tags.store",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "body",
                        "description": "Name of the new Tag",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewTag"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success - Tag created."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "400": {
                        "description": "name not provided."
                    }
                }
            }
        },
        "/api/tags/show/{tag_name}": {
            "get": {
                "tags": [
                    "tags"
                ],
                "summary": "Display the specified tag.",
                "description": "Returns the tag details.",
                "operationId": "api.tags.show",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tag_name",
                        "in": "path",
                        "description": "Tag name in database",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Tag found."
                    },
                    "404": {
                        "description": "Tag not found."
                    }
                }
            }
        },
        "/api/tags/delete/{id}": {
            "delete": {
                "tags": [
                    "tags"
                ],
                "summary": "Remove the specified resource from storage.",
                "description": "Delete the tag especified",
                "operationId": "api.tags.delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tag id in database",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - Tag found."
                    },
                    "404": {
                        "description": "Tag not found."
                    }
                }
            }
        },
        "/api/users/{email}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Display the specified user.",
                "description": "Returns the user details.",
                "operationId": "api.users.show",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Remove the specified user from storage.",
                "description": "Delete yourself from database",
                "operationId": "api.users.delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - User deleted."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "403": {
                        "description": "User could not be deleted."
                    }
                }
            }
        },
        "/api/users/{email}/status": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Display the statuses of a specified user.",
                "description": "Returns the statuses of a specified user.",
                "operationId": "api.users.getstatus",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email used by user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/api/myself": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Display the user from JWT Token.",
                "description": "Returns the user from JWT Token.",
                "operationId": "api.myself",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success - User found."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Class ApiController",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Class ApiController",
                    "type": "string"
                }
            }
        },
        "Timestamps": {
            "properties": {
                "created_at": {
                    "description": "Creation date",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-03-01 00:00:00"
                },
                "updated_at": {
                    "description": "Last updated",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-03-01 00:00:00"
                }
            }
        },
        "NewComment": {
            "required": [
                "body",
                "user_id",
                "commentable_id",
                "commentable_type"
            ],
            "properties": {
                "body": {
                    "description": "User's Comment",
                    "type": "string",
                    "example": "lorem ipsum dollor..."
                },
                "user_id": {
                    "description": "User's id in database",
                    "type": "integer"
                },
                "commentable_id": {
                    "description": "id in database of resource that will receive the comment",
                    "type": "integer"
                },
                "commentable_type": {
                    "description": "The Model Class Path of resource that will receive the commnet",
                    "type": "string",
                    "example": "App\\Models\\Route"
                }
            }
        },
        "Comment": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewComment"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "NewItem": {
            "required": [
                "place_id",
                "route_id"
            ],
            "properties": {
                "place_id": {
                    "description": "Place id in database",
                    "type": "integer"
                },
                "route_id": {
                    "description": "Route id in database",
                    "type": "integer"
                }
            }
        },
        "Item": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewItem"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "NewPlace": {
            "required": [
                "google_place_id",
                "google_json"
            ],
            "properties": {
                "google_place_id": {
                    "description": "UUID Google Place Id",
                    "type": "string",
                    "example": "ChIJVyuijGQZqwcREEzZ32LILvA"
                },
                "google_json": {
                    "description": "Google Json content for google_place_id",
                    "type": "string"
                }
            }
        },
        "Place": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewPlace"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "NewRoute": {
            "required": [
                "name",
                "user_id"
            ],
            "properties": {
                "name": {
                    "description": "Route full name",
                    "type": "string",
                    "example": "Rota de teste"
                },
                "user_id": {
                    "description": "Owner of the Route, User id in database",
                    "type": "integer"
                },
                "body": {
                    "description": "The route description",
                    "type": "string"
                }
            }
        },
        "Route": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewRoute"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "NewTag": {
            "required": [
                "name",
                "user_id"
            ],
            "properties": {
                "name": {
                    "description": "Tag name",
                    "type": "string",
                    "example": "{litoral, r\u00e1pido, baixo custo}"
                },
                "user_id": {
                    "description": "The id of the Owner, user_id in database",
                    "type": "integer"
                }
            }
        },
        "Tag": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewTag"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "NewUser": {
            "required": [
                "name",
                "email",
                "provider"
            ],
            "properties": {
                "name": {
                    "description": "User's full name",
                    "type": "string",
                    "example": "Beltrano da Silva"
                },
                "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "beltrano@gmail.com"
                },
                "provider": {
                    "description": "User's account provider",
                    "type": "string",
                    "example": [
                        "local",
                        "facebook",
                        "google"
                    ]
                }
            }
        },
        "User": {
            "allOf": [
                {
                    "$ref": "#/definitions/NewUser"
                },
                {
                    "$ref": "#/definitions/Timestamps"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        }
    }
}